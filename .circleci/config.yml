
version: 2.1

.env_common: &env_common
    SHELL: '/bin/bash'

.env_composer: &env_composer
    COMPOSER_NO_INTERACTION: '1'
    COMPOSER_MEMORY_LIMIT: '-1'
    COMPOSER_DISABLE_XDEBUG_WARN: '1'

orbs:
    codecov: 'codecov/codecov@3.2.4'

executors:
    php_min:
        environment:
            <<: *env_common
            <<: *env_composer

        docker:
            -
                name: 'main'
                image: 'cimg/php:8.2'
#    php_plus1:
#        environment:
#            <<: *env_common
#            <<: *env_composer
#
#        docker:
#            -
#                name: 'main'
#                image: 'cimg/php:8.3'


commands:
    upgrade_git:
        description: 'Upgrade Git'
        steps:
            -
                run:
                    name: 'Upgrade Git'
                    command: |
                        sudo apt-get update
                        sudo apt-get -y install 'git'

    install_php_extension_pcov:
        description: 'Install PCOV PHP extension'
        steps:
            -
                run:
                    name: 'Install PCOV PHP extension - pecl install pcov'
                    command: 'sudo pecl install pcov'

    composer_install:
        description: 'Install Composer dependencies with cache restore and save'
        steps:
            -
                restore_cache:
                    name: 'Composer - cache restore'
                    keys:
                        - 'composer-{{ checksum "./composer.lock" }}-2'

            -
                run:
                    name: 'Composer - install'
                    command: >
                        composer install --no-progress

            -
                save_cache:
                    name: 'Composer - cache save'
                    key: 'composer-{{ checksum "./composer.lock" }}-2'
                    paths:
                        - '~/.composer/cache/'


    lint:
        description: 'Run linters'
        steps:
            -
                run:
                    name: 'Run linters'
                    command: |
                        "$(composer config bin-dir)/robo" lint

    test:
        description: 'Run tests'
        steps:
            -
                run:
                    name: 'Git config user.name and user.email'
                    command: |
                        git config --global user.name 'Circle CI'
                        git config --global user.email 'circle.ci@example.com'
            -
                run:
                    name: 'Codeception - unit'
                    command: |
                        "$(composer config bin-dir)/robo" test unit
            -
                codecov/upload:
                    flags: 'unit'
                    file: './tests/_log/machine/coverage/unit/coverage.xml'
            -
                run:
                    name: 'Codeception - acceptance'
                    command: |
                        "$(composer config bin-dir)/robo" test acceptance
            -
                codecov/upload:
                    flags: 'acceptance'
                    file: './tests/_log/machine/coverage/acceptance/coverage.xml'
            -
                store_test_results:
                    name: 'Store unit test results'
                    path: './tests/_log/machine/junit'

jobs:
    build:
        executor: 'php_min'
        steps:
            - 'checkout'
            - 'composer_install'
    lint:
        executor: 'php_min'
        steps:
            - 'checkout'
            - 'composer_install'
            - 'lint'
    test:
        parameters:
            executor:
                type: 'string'
        executor: '<<parameters.executor>>'
        steps:
            - 'upgrade_git'
            - 'install_php_extension_pcov'
            - 'checkout'
            - 'composer_install'
            - 'test'

workflows:
    lint_and_test:
        jobs:
            -
                build: {}
            -
                lint:
                    requires:
                        - 'build'
            -
                test:
                    name: 'test_<<matrix.executor>>'
                    requires:
                        - 'build'
                    matrix:
                        parameters:
                            executor:
                                - 'php_min'
#                                - 'php_plus1'
